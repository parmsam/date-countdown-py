[{"name": "app.py", "content": "# Description: A simple app that counts down days to birthday\n\n# Import libraries\nfrom shiny import *\nfrom pathlib import Path\nimport os\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nfrom pathlib import Path\n\n# Import the data\nfile_path = Path(__file__).parent / \"birthdates.csv\"\n## Read the data file using pandas\ndata = pd.read_csv(file_path)\n\n## Alternatively, you can import a public CSV file from a URL such as the one below\n# public_url = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSiiCJ2cx7WYplflvzmZOWwfI8zhGYJ109sLGpCMD9yWyKxK6fFZ_e7UOPkWq8LbxjGJlTfCAjCwYSx/pub?gid=0&single=true&output=csv\"\n# data = pd.read_csv(public_url)\n\n\n# Define helper functions\ndef day_difference(start_date, end_date):\n    time_remaining = end_date - start_date\n    return time_remaining.days\n\n\ndef calculate_age(birthday_date):\n    today = datetime.today()\n    age = (\n        today.year\n        - birthday_date.year\n        - ((today.month, today.day) < (birthday_date.month, birthday_date.day))\n    )\n    return age\n\n\ndef custom_message(days, person_name, birthday_date):\n    fmt_bday = format_date(birthday_date)\n    message = f\"There are {days} days remaining until {person_name}'s birthday.\"\n    message += \" \" + f\"{person_name} was born on {fmt_bday}\"\n    message += \" \" + f\"and will be {calculate_age(birthday_date)} years old this year.\"\n    if days == 0:\n        message = f\"Happy birthday to {person_name}!\" + \" \" + message\n    if days < 0:\n        message = f\"Happy belated birthday to {person_name}!\" + \" \" + message\n    return message\n\n\ndef format_date(dob):\n    return dob.strftime(\"%B %d, %Y\")\n\n\n# Create a list of choices\nchoices = list(data[\"name\"])\n\n# Create the app UI\napp_ui = ui.page_fluid(\n    # shinyswatch.theme.minty(),\n    ui.h1(\"Birthday countdown app\"),\n    ui.navset_tab_card(\n        ui.nav(\n            \"List upcoming\",\n            ui.input_slider(\n                \"count\", \"List a number of upcoming birthdays:\", min=1, max=20, value=5\n            ),\n            ui.output_text_verbatim(\"count_remaining\"),\n        ),\n        ui.nav(\n            \"Search person\",\n            ui.input_selectize(\"name\", \"Search a person\", choices, selected=None),\n            ui.input_action_button(\"submit\", \"Search\"),\n            ui.tags.br(),\n            ui.tags.br(),\n            ui.output_text(\"days_remaining\"),\n        ),\n    ),\n)\n\n\n# Create the app server\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.submit, ignore_none=False)\n    def days_remaining():\n        # calculate time from now to next birthday\n        today = datetime.today()\n        dob = data[data[\"name\"] == input.name()][\"date\"].values[0]\n        dob = datetime.strptime(dob, \"%Y-%m-%d\")\n        # change year to current year\n        birthday = dob.replace(year=today.year)\n        days_remaining = day_difference(today, birthday)\n        # return the time remaining in months and days\n        return custom_message(days_remaining, input.name(), dob)\n\n    @output\n    @render.text\n    def count_remaining():\n        num_people = input.count()\n        # create a list of tuples containing the name and date of birth for each person\n        people = []\n        for index, row in data.iterrows():\n            name = row[\"name\"]\n            dob = datetime.strptime(row[\"date\"], \"%Y-%m-%d\")\n            people.append((name, dob))\n\n        # calculate the time from now to each person's next birthday\n        today = datetime.today()\n        results = []\n        for name, dob in people:\n            # change year to current year\n            birthday = dob.replace(year=today.year)\n            days_remaining = day_difference(today, birthday)\n            age = calculate_age(dob)\n            if days_remaining < -1:\n                birthday = dob.replace(year=today.year + 1)\n                days_remaining = day_difference(today, birthday)\n                age = age + 1\n            results.append((name, dob, days_remaining, age))\n\n        # sort the results by the number of days remaining\n        results.sort(key=lambda x: x[2])\n        # filter the results to only include the number of people specified by the user\n        results = results[:num_people]\n\n        # return a list of tuples containing the name and date of birth for each person,\n        # along with the number of days remaining until their next birthday\n        def format_results(results):\n            lines = []\n            for name, dob, days, age in results:\n                line = f\"{name} will be {age} years old in {days} days ({format_date(dob)}).\"\n                lines.append(line)\n            return \"\\n\".join(lines)\n\n        return format_results(results)\n\n\n# Create the app\napp = App(app_ui, server)\n", "type": "text"}, {"name": "birthdates.csv", "content": "name,date,relationship\nJohn Smith,1990-05-10,Brother\nJane Smith,1993-09-15,Sister\nDavid Johnson,1985-12-03,Father\nEmily Johnson,1992-07-22,Mother\nMichael Davis,1978-11-08,Uncle\nSarah Davis,1982-04-17,Aunt\nDaniel Wilson,2002-01-25,Cousin\nOlivia Wilson,2005-08-12,Cousin\nThomas Brown,1970-06-30,Grandfather\nLaura Brown,1975-03-18,Grandmother", "type": "text"}]