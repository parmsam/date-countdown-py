[{"name": "app.py", "content": "# Description: A simple app that counts down days to event\n\n# Import libraries\nfrom shiny import *\nfrom pathlib import Path\nimport os\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\n# Import the data\nfile_path = Path(__file__).parent / \"events.csv\"\n## Read the data file using pandas\ndata = pd.read_csv(file_path)\n\n## Alternatively, you can import a public CSV file from a URL such as the one below\n# public_url = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSS-Stwrw4ikOVAOgK6lzyqhbnC3T6xUynhoVIiA1UYlGQApXy-m12hu4aU2JnweyTV44wkOgK5JKCP/pub?gid=0&single=true&output=csv\"\n# data = pd.read_csv(public_url)\n\n\n# Define helper functions\ndef day_difference(start_date, end_date):\n    time_remaining = end_date - start_date\n    return time_remaining.days\n\n\ndef custom_message(days, event, date, location):\n    fmt_day = format_date(date)\n    message = f\"There are {days} days remaining until {event}.\"\n    message += \" \" + f\"{event} is on {fmt_day}\"\n    message += \" \" + f\"at {location}.\"\n    if days == 0:\n        message = f\"{event} is today\"\n        message += \" \" + f\"at {location}!\"\n    if days < 0:\n        message = f\"{event} already passed!\" + \" \"\n        message += f\"{event} was on {fmt_day}\"\n        message += \" \" + f\"at {location}.\"\n    return message\n\n\ndef format_date(dob):\n    return dob.strftime(\"%B %d, %Y\")\n\n\n# Create a list of choices\nchoices = list(data[\"name\"])\n\n# Create the app UI\napp_ui = ui.page_fluid(\n    # shinyswatch.theme.minty(),\n    ui.h1(\"Event countdown app\"),\n    ui.navset_tab_card(\n        ui.nav(\n            \"List upcoming\",\n            ui.input_slider(\n                \"count\", \"List a number of upcoming events:\", min=1, max=20, value=5\n            ),\n            ui.output_text_verbatim(\"count_remaining\"),\n        ),\n        ui.nav(\n            \"Search event\",\n            ui.input_selectize(\"name\", \"Search an event\", choices, selected=None),\n            ui.input_action_button(\"submit\", \"Search\"),\n            ui.tags.br(),\n            ui.tags.br(),\n            ui.output_text(\"days_remaining\"),\n        ),\n    ),\n)\n\n\n# Create the app server\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.submit, ignore_none=False)\n    def days_remaining():\n        # calculate time from now to next event\n        today = datetime.today()\n        event_date = data[data[\"name\"] == input.name()][\"date\"].values[0]\n        event_date = datetime.strptime(event_date, \"%Y-%m-%d\")\n        days_remaining = day_difference(today, event_date)\n        location = data[data[\"name\"] == input.name()][\"location\"].values[0]\n        # return the time remaining in months and days\n        return custom_message(days_remaining, input.name(), event_date, location)\n\n    @output\n    @render.text\n    def count_remaining():\n        count_rows = input.count()\n        # create a list of tuples with the name and date of event\n        events = []\n        for index, row in data.iterrows():\n            name = row[\"name\"]\n            date = datetime.strptime(row[\"date\"], \"%Y-%m-%d\")\n            location = row[\"location\"]\n            events.append((name, date, location))\n\n        # calculate the time from now to each event\n        today = datetime.today()\n        results = []\n        for name, date, location in events:\n            days_remaining = day_difference(today, date)\n            if days_remaining < 0:\n                continue\n            results.append((name, date, days_remaining, location))\n\n        # sort the results by the number of days remaining\n        results.sort(key=lambda x: x[2])\n        # filter the results to only include the count specified by the user\n        results = results[:count_rows]\n\n        # return a list of tuples containing the name and location for each event,\n        # along with the number of days remaining to event\n        def format_results(results):\n            lines = []\n            for name, date, days, location in results:\n                line = f\"{name} will be in {days} days at {location} ({format_date(date)}).\"\n                lines.append(line)\n            return \"\\n\".join(lines)\n\n        return format_results(results)\n\n\n# Create the app\napp = App(app_ui, server)\n", "type": "text"}, {"name": "events.csv", "content": "name,date,location\nRandom raffle,2023-06-01,\"321 Side St, Nowheretown\"\nBirthday Bash,2023-07-15,\"123 Main St, Anytown\"\nSummer BBQ,2023-08-05,\"456 Park Ave, Somewhere City\"\nFamily Reunion,2023-09-02,\"789 Elm St, Hometown\"\nAnniversary Celebration,2023-09-20,\"321 Oak Rd, Nearby Town\"\nGraduation Party,2023-10-12,\"987 Pine Ln, Outskirts\"\nHalloween Costume Contest,2023-10-31,\"654 Cedar Dr, Spookyville\"\nThanksgiving Feast,2023-11-23,\"789 Walnut Ave, Harvestville\"\nWinter Wonderland Gala,2023-12-15,\"321 Frosty Rd, Snowville\"\nNew Year's Eve Party,2023-12-31,\"654 Icicle Ln, Celebration City\"\nValentine's Day Dinner,2024-02-14,\"987 Love St, Romance Town\"", "type": "text"}]